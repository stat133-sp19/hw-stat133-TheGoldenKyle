ggplot(data = points_salary, aes(x=team, y = cost_point, fill=team)) +
geom_bar(stat="identity") + scale_color_continuous() +
geom_hline(aes(yintercept = mean(points_salary$cost_point)), color="red") +
labs(title = "NBA Total Cost/Total Points Scored Ratio by Team", x = "Teams", y = "Total Cost of Team/Total Points Scored")
ggplot(data = points_salary, aes(x=reorder(team, cost_point), y=cost_point)) + geom_bar(stat='identity') + coord_flip() + ylab("Cost per Point ($)") + xlab("Team")  + ggtitle("NBA Teams Ranked by Cost per Point") + geom_abline(slope=0, intercept=mean(points_salary$cost_point), col = "red", lty=1)
#e
ggplot(data = points_salary, aes(x=reorder(team, cost_point), y=cost_point)) + geom_bar(stat='identity') + coord_flip() + ylab("Cost per Point (in Millions of $)") + xlab("Team")  + ggtitle("NBA Teams Ranked by Cost per Point") + geom_abline(slope=0, intercept=mean(points_salary$cost_point), col = "red", lty=2)
#e
ggplot(data = points_salary, aes(x=reorder(team, cost_point), y=cost_point)) + geom_bar(stat='identity') + coord_flip() + ylab("Cost per Point (in Millions of $)") + xlab("Team")  + ggtitle("NBA Teams Ranked by Cost per Point") + geom_abline(slope=0, intercept=mean(points_salary$cost_point), col = "red", lty=1)
#e
ggplot(data = points_salary, aes(x=reorder(team, cost_point), y=cost_point)) + geom_bar(stat='identity') + coord_flip() + ylab("Cost per Point (in Millions of $)") + xlab("Team")  + ggtitle("NBA Teams Ranked by Cost per Point") + geom_abline(slope=0, intercept=mean(points_salary$cost_point), col = "red", lty=3)
#e
ggplot(data = points_salary, aes(x=reorder(team, cost_point), y=cost_point)) + geom_bar(stat='identity') + coord_flip() + ylab("Cost per Point (in Millions of $)") + xlab("Team")  + ggtitle("NBA Teams Ranked by Cost per Point") + geom_abline(slope=0, intercept=mean(points_salary$cost_point), col = "red", lty=4)
#e
ggplot(data = points_salary, aes(x=reorder(team, cost_point), y=cost_point)) + geom_bar(stat='identity') + coord_flip() + ylab("Cost per Point (in Millions of $)") + xlab("Team")  + ggtitle("NBA Teams Ranked by Cost per Point") + geom_abline(slope=0, intercept=mean(points_salary$cost_point), col = "red", lty=5)
#e
ggplot(data = points_salary, aes(x=reorder(team, cost_point), y=cost_point)) + geom_bar(stat='identity') + coord_flip() + ylab("Cost per Point (in Millions of $)") + xlab("Team")  + ggtitle("NBA Teams Ranked by Cost per Point") + geom_abline(slope=0, intercept=mean(points_salary$cost_point), col = "red", lty=0)
#e
ggplot(data = points_salary, aes(x=reorder(team, cost_point), y=cost_point)) + geom_bar(stat='identity') + coord_flip() + ylab("Cost per Point (in Millions of $)") + xlab("Team")  + ggtitle("NBA Teams Ranked by Cost per Point") + geom_abline(slope=0, intercept=mean(points_salary$cost_point), col = "red", lty=1)
#e
ggplot(data = points_salary, aes(x=reorder(team, cost_point), y=cost_point)) + geom_bar(stat='identity', fill='#FF6666') + coord_flip() + ylab("Cost per Point (in Millions of $)") + xlab("Team")  + ggtitle("NBA Teams Ranked by Cost per Point") + geom_abline(slope=0, intercept=mean(points_salary$cost_point), col = "red", lty=1)
#e
ggplot(data = points_salary, aes(x=reorder(team, cost_point), y=cost_point)) + geom_bar(stat='identity', fill='#222222') + coord_flip() + ylab("Cost per Point (in Millions of $)") + xlab("Team")  + ggtitle("NBA Teams Ranked by Cost per Point") + geom_abline(slope=0, intercept=mean(points_salary$cost_point), col = "red", lty=1)
#e
ggplot(data = points_salary, aes(x=reorder(team, cost_point), y=cost_point)) + geom_bar(stat='identity', fill='#123456') + coord_flip() + ylab("Cost per Point (in Millions of $)") + xlab("Team")  + ggtitle("NBA Teams Ranked by Cost per Point") + geom_abline(slope=0, intercept=mean(points_salary$cost_point), col = "red", lty=1)
#e
ggplot(data = points_salary, aes(x=reorder(team, cost_point), y=cost_point)) + geom_bar(stat='identity', fill='#efefef') + coord_flip() + ylab("Cost per Point (in Millions of $)") + xlab("Team")  + ggtitle("NBA Teams Ranked by Cost per Point") + geom_abline(slope=0, intercept=mean(points_salary$cost_point), col = "red", lty=1)
#e
ggplot(data = points_salary, aes(x=reorder(team, cost_point), y=cost_point)) + geom_bar(stat='identity', fill=team) + coord_flip() + ylab("Cost per Point (in Millions of $)") + xlab("Team")  + ggtitle("NBA Teams Ranked by Cost per Point") + geom_abline(slope=0, intercept=mean(points_salary$cost_point), col = "red", lty=1)
#e
ggplot(data = points_salary, aes(x=reorder(team, cost_point), y=cost_point)) + geom_bar(stat='identity', fill='#cofefe') + coord_flip() + ylab("Cost per Point (in Millions of $)") + xlab("Team")  + ggtitle("NBA Teams Ranked by Cost per Point") + geom_abline(slope=0, intercept=mean(points_salary$cost_point), col = "red", lty=1)
#e
ggplot(data = points_salary, aes(x=reorder(team, cost_point), y=cost_point)) + geom_bar(stat='identity', fill='#COFEFE') + coord_flip() + ylab("Cost per Point (in Millions of $)") + xlab("Team")  + ggtitle("NBA Teams Ranked by Cost per Point") + geom_abline(slope=0, intercept=mean(points_salary$cost_point), col = "red", lty=1)
#e
ggplot(data = points_salary, aes(x=reorder(team, cost_point), y=cost_point)) + geom_bar(stat='identity', fill='#C0FEFE') + coord_flip() + ylab("Cost per Point (in Millions of $)") + xlab("Team")  + ggtitle("NBA Teams Ranked by Cost per Point") + geom_abline(slope=0, intercept=mean(points_salary$cost_point), col = "red", lty=1)
#e
ggplot(data = points_salary, aes(x=reorder(team, cost_point), y=cost_point)) + geom_bar(stat='identity', fill='#00F3FF') + coord_flip() + ylab("Cost per Point (in Millions of $)") + xlab("Team")  + ggtitle("NBA Teams Ranked by Cost per Point") + geom_abline(slope=0, intercept=mean(points_salary$cost_point), col = "red", lty=1)
#e
ggplot(data = points_salary, aes(x=reorder(team, cost_point), y=cost_point)) + geom_bar(stat='identity', fill='#004DFF') + coord_flip() + ylab("Cost per Point (in Millions of $)") + xlab("Team")  + ggtitle("NBA Teams Ranked by Cost per Point") + geom_abline(slope=0, intercept=mean(points_salary$cost_point), col = "red", lty=1)
#e
ggplot(data = points_salary, aes(x=reorder(team, cost_point), y=cost_point)) + geom_bar(stat='identity', fill='#004DFF') + coord_flip() + ylab("Cost per Point (in Millions of $)") + xlab("Team")  + ggtitle("NBA Teams Ranked by Cost per Point") + geom_abline(slope=0, intercept=mean(points_salary$cost_point), col = "orange", lty=1)
#e
ggplot(data = points_salary, aes(x=reorder(team, cost_point), y=cost_point)) + geom_bar(stat='identity', fill='silver') + coord_flip() + ylab("Cost per Point (in Millions of $)") + xlab("Team")  + ggtitle("NBA Teams Ranked by Cost per Point") + geom_abline(slope=0, intercept=mean(points_salary$cost_point), col = "orange", lty=1)
#e
ggplot(data = points_salary, aes(x=reorder(team, cost_point), y=cost_point)) + geom_bar(stat='identity', fill='#A52626') + coord_flip() + ylab("Cost per Point (in Millions of $)") + xlab("Team")  + ggtitle("NBA Teams Ranked by Cost per Point") + geom_abline(slope=0, intercept=mean(points_salary$cost_point), col = "orange", lty=1)
#e
ggplot(data = points_salary, aes(x=reorder(team, cost_point), y=cost_point)) + geom_bar(stat='identity', fill='#A52626') + coord_flip() + ylab("Cost per Point (in Millions of $)") + xlab("Team")  + ggtitle("NBA Teams Ranked by Cost per Point") + geom_abline(slope=0, intercept=mean(points_salary$cost_point), col = "orange", lty=1, size=1)
#f
ggplot(data = points_salary)  + geom_point(aes(x=median_salary, y=median_points)) + ylab("Median Points") + xlab("Median Salary (in Millions)")  + ggtitle("Median Points vs Salary of NBA Teams") + geom_label(size=3, aes(label = paste(team, "| $", round(cost_point * 1000000), "/pt"), x = median_salary, y = median_points))
ggplot(data = points_salary, aes(x = median_salary, y = median_points)) +
geom_point(stat="identity", aes(color = cost_point)) +
scale_color_continuous() +
labs(title = "NBA Median Salary and Median Points by Team", x = "Median Salary (in millions)", y = "Median Points")
ggplot(data = points_salary, aes(x = median_salary, y = median_points)) +
geom_point(stat="identity", aes(size = cost_point)) +
scale_color_continuous() +
labs(title = "NBA Median Salary and Median Points by Team", x = "Median Salary (in millions)", y = "Median Points")
ggplot(data = points_salary, aes(x = median_salary, y = median_points)) +
geom_point(stat="identity", aes(size = cost_point, color = team)) +
scale_color_continuous() +
labs(title = "NBA Median Salary and Median Points by Team", x = "Median Salary (in millions)", y = "Median Points")
ggplot(data = points_salary, aes(x = median_salary, y = median_points)) +
geom_point(stat="identity", aes(size = cost_point), aes(color = team)) +
scale_color_continuous() +
labs(title = "NBA Median Salary and Median Points by Team", x = "Median Salary (in millions)", y = "Median Points")
ggplot(data = points_salary, aes(x = median_salary, y = median_points)) +
geom_point(stat="identity", aes(size = team)) +
scale_color_continuous() +
labs(title = "NBA Median Salary and Median Points by Team", x = "Median Salary (in millions)", y = "Median Points")
ggplot(data = points_salary, aes(x = median_salary, y = median_points)) +
geom_point(stat="identity", aes(size = cost_point)) +
scale_color_continuous() +
labs(title = "NBA Median Salary and Median Points by Team", x = "Median Salary (in millions)", y = "Median Points")
ggplot(data = points_salary, aes(x = median_salary, y = median_points)) +
geom_point(stat="identity", aes(size = cost_point, color = team)) +
scale_color_continuous() +
labs(title = "NBA Median Salary and Median Points by Team", x = "Median Salary (in millions)", y = "Median Points")
ggplot(data = points_salary, aes(x = median_salary, y = median_points)) +
geom_point(stat="identity", aes(size = cost_point, color = team)) +
ggtitle(title = "NBA Median Salary and Median Points by Team") + xlab("Median Salary (in millions)") + ylab("Median Points")
ggplot(data = points_salary, aes(x = median_salary, y = median_points)) +
geom_point(stat="identity", aes(size = cost_point, color = team)) +
ggtitle("NBA Median Salary and Median Points by Team") + xlab("Median Salary (in millions)") + ylab("Median Points")
#f
ggplot(data = points_salary, aes(x = median_salary, y = median_points)) +
geom_point(stat="identity", aes(size = cost_point, color = team)) +
ggtitle("Median Salary vs Median Points by Team") + xlab("Median Salary (in millions)") + ylab("Median Points")
#f
ggplot(data = points_salary, aes(x = median_salary, y = median_points)) +
geom_point(stat="identity", aes(size = cost_point, color = team)) +
ggtitle("Median Salary vs Median Points by Team") + xlab("Median Salary (in millions of $)") + ylab("Median Points")
#f
ggplot(data = points_salary, aes(x = median_salary, y = median_points)) +
geom_point(stat="identity", aes(size = cost_point, name = "Cost/Point" color = team)) +
#f
ggplot(data = points_salary, aes(x = median_salary, y = median_points)) +
geom_point(stat="identity", aes(size = cost_point, name = "Cost/Point", color = team)) +
ggtitle("Median Salary vs Median Points by Team") + xlab("Median Salary (in millions of $)") + ylab("Median Points")
#f
ggplot(data = points_salary, aes(x = median_salary, y = median_points)) +
geom_point(stat="identity", aes(size = cost_point, color = team, name = "Cost/Point")) +
ggtitle("Median Salary vs Median Points by Team") + xlab("Median Salary (in millions of $)") + ylab("Median Points")
#f
ggplot(data = points_salary, aes(x = median_salary, y = median_points)) +
geom_point(stat="identity", aes(size = cost_point, color = team)) +
ggtitle("Median Salary vs Median Points by Team") + xlab("Median Salary (in millions of $)") + ylab("Median Points")
# a) Scatter Plot
plot(abalone$Sex)
tail(abalone)
url <- "http://archive.ics.uci.edu/ml/machine-learning-databases/abalone/abalone.data"
abalone <- read.table(url, sep = ",")
head(abalone)
tail(abalone)
str(abalone, vec.len = 1)
column_names <- c("Sex", "Length", "Diameter", "Height", "Whole", "Shucked", "Viscera", "Shell", "Rings")
column_types <- c("character", "real", "real", "real", "real", "real", "real", "real", "integer")
abalone <- read.table(url, sep = ",", col.names = column_names, colClasses = column_types)
str(abalone, vec.len = 1)
abalone2 <- read.csv(url, header = FALSE)
str(abalone2, vec.len = 1)
abalone10 <- read.table(url, sep = ",", col.names = column_names, colClasses = column_types, nrows = 10)
str(abalone10, vec.len = 1)
abalone20 <- read.table(url, sep = ",", col.names = column_names, colClasses = column_types, nrows = 10, skip = 10)
str(abalone20, vec.len = 1)
summary(abalone)
head(abalone)
tail(abalone)
dim(abalone)
names(abalone)
colnames(abalone)
nrow(abalone)
ncol(abalone)
# a) When you specify a column as NULL in colClasses, the column is skipped.
rows <- c("Min", "Max", "Mean", "SD")
mins <- c(min(abalone[,2]), min(abalone[,3]), min(abalone[,4]), min(abalone[,5]), min(abalone[,6]), min(abalone[,7]), min(abalone[,8]), min(abalone[,9]))
maxes <- c(max(abalone[,2]), max(abalone[,3]), max(abalone[,4]), max(abalone[,5]), max(abalone[,6]), max(abalone[,7]), max(abalone[,8]), max(abalone[,9]))
means <- c(mean(abalone[,2]), mean(abalone[,3]), mean(abalone[,4]), mean(abalone[,5]), mean(abalone[,6]), mean(abalone[,7]), mean(abalone[,8]), mean(abalone[,9]))
SDs <- sapply(abalone, sd, na.rm = TRUE)
SDs
lens <- c(min(abalone[,2]), max(abalone[,2]), mean(abalone[,2]), SDs[2])
diams <- c(min(abalone[,3]), max(abalone[,3]), mean(abalone[,3]), SDs[3])
heights <- c(min(abalone[,4]), max(abalone[,4]), mean(abalone[,4]), SDs[4])
wholes <- c(min(abalone[,5]), max(abalone[,5]), mean(abalone[,5]), SDs[5])
shucks <- c(min(abalone[,6]), max(abalone[,6]), mean(abalone[,6]), SDs[6])
viscersas <- c(min(abalone[,7]), max(abalone[,7]), mean(abalone[,7]), SDs[7])
shells <- c(min(abalone[,8]), max(abalone[,8]), mean(abalone[,8]), SDs[8])
rings <- c(min(abalone[,9]), max(abalone[,9]), mean(abalone[,9]), SDs[9])
data <- data.frame("Length" = lens, "Diam" = diams, "Height" = heights, "Whole" = wholes, "Shucked" = shucks, "Viscera" = viscersas, "Shell" = shells, "Rings" = rings, row_names = rows)
data
abalone[1:5,]
abalone[seq(from = 5, to = 50, by = 5),]
abalone[seq(from = length(abalone[[1]]), to = length(abalone[[1]]) - 5, by = -1),]
colnames(abalone)
height14 <- data.frame(abalone[abalone[["Height"]] < 0.14,])
dim(height14)
infant <- data.frame(abalone[abalone[["Sex"]] == 'I',])
dim(infant)
male_female <- data.frame(abalone[abalone[["Sex"]] == 'M' | abalone[["Sex"]] == 'F',])
dim(male_female)
data.frame(abalone[abalone[["Rings"]] > 25, c(1, 9)])
data.frame(abalone[abalone[["Sex"]] == 'I' & abalone[["Rings"]] > 3 & abalone[["Rings"]] < 6, c(1,3,9)])
abies <- abalone[abalone$Sex == 'I', c('Length', 'Height', 'Diameter', 'Whole', 'Shucked')]
abies$product <- abies$Whole * abies$Shucked
abies3 <- data.frame("log_height" = log(abies$Height), "log_length" = log(abies$Length))
filtered <- abalone[abalone[["Height"]] < 0.12,]
ordered <- filtered[order(filtered$Height, decreasing = FALSE),]
ordered2 <- abalone[order(abalone$Height, decreasing = TRUE),]
data.frame("Sex" = ordered2[1:5, 1], "Diameter" = ordered2[1:5, 3], "Rings" = ordered2[1:5, 9])
ordered3 <- abalone[order(abalone$Length, decreasing = TRUE),]
data.frame("Sex" = ordered3[1:5, 1], "Diameter" = ordered3[1:5, 3], "Rings" = ordered3[1:5, 9])
# a) Scatter Plot
plot(abalone$Sex)
plot(abalone$Height)
plot(abalone$Sex)
plot(abalone$Sex)
plot(abalone$Sex, y)
plot.default(abalone$Sex)
plot(Sex ~ group, data=abalone)
plot(Sex, data=abalone)
plot(abalone$Sex, axes = FALSE, main = "no axes")
plot(x=abalone$Sex)
plot(abalone$Sex)
plot(abalone$Sex)
View(abalone)
column_types <- c("factor", "real", "real", "real", "real", "real", "real", "real", "integer")
url <- "http://archive.ics.uci.edu/ml/machine-learning-databases/abalone/abalone.data"
abalone <- read.table(url, sep = ",")
head(abalone)
tail(abalone)
str(abalone, vec.len = 1)
column_names <- c("Sex", "Length", "Diameter", "Height", "Whole", "Shucked", "Viscera", "Shell", "Rings")
column_types <- c("factor", "real", "real", "real", "real", "real", "real", "real", "integer")
abalone <- read.table(url, sep = ",", col.names = column_names, colClasses = column_types)
str(abalone, vec.len = 1)
abalone2 <- read.csv(url, header = FALSE)
str(abalone2, vec.len = 1)
abalone10 <- read.table(url, sep = ",", col.names = column_names, colClasses = column_types, nrows = 10)
str(abalone10, vec.len = 1)
abalone20 <- read.table(url, sep = ",", col.names = column_names, colClasses = column_types, nrows = 10, skip = 10)
str(abalone20, vec.len = 1)
summary(abalone)
head(abalone)
tail(abalone)
dim(abalone)
names(abalone)
colnames(abalone)
nrow(abalone)
ncol(abalone)
# a) When you specify a column as NULL in colClasses, the column is skipped.
rows <- c("Min", "Max", "Mean", "SD")
mins <- c(min(abalone[,2]), min(abalone[,3]), min(abalone[,4]), min(abalone[,5]), min(abalone[,6]), min(abalone[,7]), min(abalone[,8]), min(abalone[,9]))
maxes <- c(max(abalone[,2]), max(abalone[,3]), max(abalone[,4]), max(abalone[,5]), max(abalone[,6]), max(abalone[,7]), max(abalone[,8]), max(abalone[,9]))
means <- c(mean(abalone[,2]), mean(abalone[,3]), mean(abalone[,4]), mean(abalone[,5]), mean(abalone[,6]), mean(abalone[,7]), mean(abalone[,8]), mean(abalone[,9]))
SDs <- sapply(abalone, sd, na.rm = TRUE)
SDs
lens <- c(min(abalone[,2]), max(abalone[,2]), mean(abalone[,2]), SDs[2])
diams <- c(min(abalone[,3]), max(abalone[,3]), mean(abalone[,3]), SDs[3])
heights <- c(min(abalone[,4]), max(abalone[,4]), mean(abalone[,4]), SDs[4])
wholes <- c(min(abalone[,5]), max(abalone[,5]), mean(abalone[,5]), SDs[5])
shucks <- c(min(abalone[,6]), max(abalone[,6]), mean(abalone[,6]), SDs[6])
viscersas <- c(min(abalone[,7]), max(abalone[,7]), mean(abalone[,7]), SDs[7])
shells <- c(min(abalone[,8]), max(abalone[,8]), mean(abalone[,8]), SDs[8])
rings <- c(min(abalone[,9]), max(abalone[,9]), mean(abalone[,9]), SDs[9])
data <- data.frame("Length" = lens, "Diam" = diams, "Height" = heights, "Whole" = wholes, "Shucked" = shucks, "Viscera" = viscersas, "Shell" = shells, "Rings" = rings, row_names = rows)
data
abalone[1:5,]
abalone[seq(from = 5, to = 50, by = 5),]
abalone[seq(from = length(abalone[[1]]), to = length(abalone[[1]]) - 5, by = -1),]
colnames(abalone)
height14 <- data.frame(abalone[abalone[["Height"]] < 0.14,])
dim(height14)
infant <- data.frame(abalone[abalone[["Sex"]] == 'I',])
dim(infant)
male_female <- data.frame(abalone[abalone[["Sex"]] == 'M' | abalone[["Sex"]] == 'F',])
dim(male_female)
data.frame(abalone[abalone[["Rings"]] > 25, c(1, 9)])
data.frame(abalone[abalone[["Sex"]] == 'I' & abalone[["Rings"]] > 3 & abalone[["Rings"]] < 6, c(1,3,9)])
abies <- abalone[abalone$Sex == 'I', c('Length', 'Height', 'Diameter', 'Whole', 'Shucked')]
abies$product <- abies$Whole * abies$Shucked
abies3 <- data.frame("log_height" = log(abies$Height), "log_length" = log(abies$Length))
filtered <- abalone[abalone[["Height"]] < 0.12,]
ordered <- filtered[order(filtered$Height, decreasing = FALSE),]
ordered2 <- abalone[order(abalone$Height, decreasing = TRUE),]
data.frame("Sex" = ordered2[1:5, 1], "Diameter" = ordered2[1:5, 3], "Rings" = ordered2[1:5, 9])
ordered3 <- abalone[order(abalone$Length, decreasing = TRUE),]
data.frame("Sex" = ordered3[1:5, 1], "Diameter" = ordered3[1:5, 3], "Rings" = ordered3[1:5, 9])
plot(abalone$Height)
# a) Scatter Plot
plot(abalone$Sex)
# b) Bar Plot
plot(abalone$Height, abalone$Length)
plot(data.frame("L" = lens, "H" = heights))
# c) Scatter Plot
plot(data.frame("L" = lens, "H" = heights, "D" = diams))
# d) Scatter Plot
plot(data.frame(abalone$Sex, abalone$Length))
# e) Scatter Plot Matrix
plot(data.frame(abalone$Length, abalone$Sex))
# f) Box Plot
plot(data.frame(abalone$Sex, abalone$Length))
# g) Scatter Plot
plot(data.frame(abalone$Length, abalone$Sex))
plot.default(abalone$Length, abalone$Height, pch = "*", xlab = "Length", ylab = "Height", main = "Length vs. Height")
a <- c(1,2,3,4,5,6,7,8,9)
a <- c(1,2,3,4,5,6,7,8,9,10,11,12)
a <- matrix(a, nrows=3, ncols=4)
a <- matrix(a, nrows=3, ncols=4)
a <- matrix(a, nrow=3, ncol=4)
A
a
a[1, 2]
a[2,3]
a <- list(c(1,2,3), c(2,3,4))
a
typeof(a)
typeof(a[1])
a[1]
a[[1]]
typeof(a[[1]])
a[[1]]
a[[2]]
typeof(a[[2]])
s <- summarise(group_by(shots_data, name), sum(seconds_remaining))
library(dplyr)
library(ggplot2)
shots_data <- read.csv("../data/shots-data.csv", stringsAsFactors = FALSE)
setwd("~/Dropbox/School/STAT133/hw-stat133/workout1/report")
shots_data <- read.csv("../data/shots-data.csv", stringsAsFactors = FALSE)
s <- summarise(group_by(shots_data, name), sum(seconds_remaining))
s
s <- summarise(group_by(shots_data, name), sum(shots_data[shot_made_flag == "shot_yes"))
s <- summarise(group_by(shots_data, name), sum(shots_data[shot_made_flag == "shot_yes"]))
s <- summarise(group_by(shots_data, name), sum(shots_data[shot_made_flag == "shot_yes", ]))
s <- summarise(group_by(shots_data, name), sum(shots_data[shots_data$shot_made_flag == "shot_yes", ]))
shots_data[shots_data$shot_made_flag == "shot_yes", ]
shots_data$one <- 1
s <- summarise(group_by(shots_data, name), sum(shots_data[shots_data$shot_made_flag == "shot_yes", "one"]))
s
s <- summarise(group_by(shots_data, name), sum(group_by(shots_data[shots_data$shot_made_flag == "shot_yes", "one"]), name)
s
s <- summarise(group_by(shots_data, name), sum(group_by(shots_data[shots_data$shot_made_flag == "shot_yes", "one"]), name))
s <- summarise(group_by(shots_data, name), sum(shot_made_flag == "shot_yes"), name))
s <- summarise(group_by(shots_data, name), sum(shot_made_flag == "shot_yes"))
s
s <- summarise(group_by(shots_data, name), made = sum(shot_made_flag == "shot_yes"))
s
s <- summarise(group_by(shots_data, name), total = sum(one), made = sum(shot_made_flag == "shot_yes"))
s
s <- summarise(group_by(shots_data, name), total = sum(one), made = sum(shot_made_flag == "shot_yes"), perc_made = total / made)
s
s <- summarise(group_by(shots_data, name), total = sum(one), made = sum(shot_made_flag == "shot_yes"), perc_made = made / total)
s
s <- summarise(group_by(shots_data[shots_data$shot_type == "2PT Field Goal"], name), total = sum(one), made = sum(shot_made_flag == "shot_yes"), perc_made = made / total)
s <- summarise(group_by(shots_data[shots_data$shot_type == "2PT Field Goal", ], name), total = sum(one), made = sum(shot_made_flag == "shot_yes"), perc_made = made / total)
s
3pt_percentage <- summarise(group_by(shots_data[shots_data$shot_type == "2PT Field Goal", ], name), total = sum(one), made = sum(shot_made_flag == "shot_yes"), perc_made = made / total)
two_pt_percentage <- summarise(group_by(shots_data[shots_data$shot_type == "2PT Field Goal", ], name), total = sum(one), made = sum(shot_made_flag == "shot_yes"), perc_made = made / total)
three_pt_percentage <- summarise(group_by(shots_data[shots_data$shot_type == "2PT Field Goal", ], name), total = sum(one), made = sum(shot_made_flag == "shot_yes"), perc_made = made / total)
three_pt_percentage
two_pt_percentage <- summarise(group_by(shots_data[shots_data$shot_type == "2PT Field Goal", ], name), total = sum(one), made = sum(shot_made_flag == "shot_yes"), perc_made = made / total)
two_pt_percentage
three_pt_percentage <- summarise(group_by(shots_data[shots_data$shot_type == "2PT Field Goal", ], name), total = sum(one), made = sum(shot_made_flag == "shot_yes"), perc_made = made / total)
three_pt_percentage
three_pt_percentage <- summarise(group_by(shots_data[shots_data$shot_type == "3PT Field Goal", ], name), total = sum(one), made = sum(shot_made_flag == "shot_yes"), perc_made = made / total)
three_pt_percentage
total_percentage <- summarise(group_by(shots_data, name), total = sum(one), made = sum(shot_made_flag == "shot_yes"), perc_made = made / total)
total_percentage <- arrange(summarise(group_by(shots_data, name), total = sum(one), made = sum(shot_made_flag == "shot_yes"), perc_made = made / total), desc(perc_made)
total_percentage <- arrange(summarise(group_by(shots_data, name), total = sum(one), made = sum(shot_made_flag == "shot_yes"), perc_made = made / total), desc(perc_made))
total_percentage <- arrange(summarise(group_by(shots_data, name), total = sum(one), made = sum(shot_made_flag == "shot_yes"), perc_made = made / total), desc(perc_made)
total_percentage <- arrange(summarise(group_by(shots_data, name), total = sum(one), made = sum(shot_made_flag == "shot_yes"), perc_made = made / total), desc(perc_made))
two_pt_percentage <- summarise(group_by(shots_data[shots_data$shot_type == "2PT Field Goal", ], name), total = sum(one), made = sum(shot_made_flag == "shot_yes"))
two_pt_percentage$perc_made = two_pt_percentage$made / two_pt_percentage$total
two_pt_percentage
arrange(two_pt_percentage, desc(perc_made))
two_pt_percentage <- summarise(group_by(shots_data[shots_data$shot_type == "2PT Field Goal", ], name), total = sum(one), made = sum(shot_made_flag == "shot_yes"))
two_pt_percentage$perc_made = two_pt_percentage$made / two_pt_percentage$total
two_pt_percentage <- arrange(two_pt_percentage, desc(perc_made))
three_pt_percentage <- summarise(group_by(shots_data[shots_data$shot_type == "3PT Field Goal", ], name), total = sum(one), made = sum(shot_made_flag == "shot_yes"))
three_pt_percentage$perc_made = three_pt_percentage$made / three_pt_percentage$total
three_pt_percentage <- arrange(three_pt_percentage, desc(perc_made))
total_pt_percentage <- summarise(group_by(shots_data, name), total = sum(one), made = sum(shot_made_flag == "shot_yes"))
total_pt_percentage$perc_made = total_pt_percentage$made / total_pt_percentage$total
total_pt_percentage <- arrange(total_pt_percentage, desc(perc_made))
two_pt_percentage
three_pt_percentage
total_pt_percentage
knitr::include_graphics('../images/gsw-shot-charts.pdf')
jpeg(file = "../images/gsw-shot-charts.pdf", width=800, height=700)
ggplot(data = shots_data) +
annotation_custom(court_image, -250, 250, -50, 420) +
geom_point(aes(x = x, y = y, color = shot_made_flag)) +
ylim(-50, 420) +
ggtitle('Shot Charts: GSW (2016 season)') +
facet_wrap(~ name) +
theme_minimal()
dev.off()
library(ggplot2)
library(jpeg)
library(grid)
shots_data <- read.csv("../data/shots-data.csv", stringsAsFactors = FALSE)
court_file <- "../images/nba-court.jpg"
court_image <- rasterGrob(
readJPEG(court_file),
width = unit(1, "npc"),
height = unit(1, "npc"))
pdf(file = "../images/klay-thompson-shot-chart.pdf", width=6.5, height=5)
ggplot(data = shots_data[shots_data$name == "Klay Thompson",]) +
annotation_custom(court_image, -250, 250, -50, 420) +
geom_point(aes(x = x, y = y, color = shot_made_flag)) +
ylim(-50, 420) +
ggtitle('Shot Chart: Klay Thompson (2016 season)') +
theme_minimal()
dev.off()
pdf(file = "../images/draymond-green-shot-chart.pdf", width=6.5, height=5)
ggplot(data = shots_data[shots_data$name == "Draymond Green",]) +
annotation_custom(court_image, -250, 250, -50, 420) +
geom_point(aes(x = x, y = y, color = shot_made_flag)) +
ylim(-50, 420) +
ggtitle('Shot Chart: Draymond Green (2016 season)') +
theme_minimal()
dev.off()
pdf(file = "../images/stephen-curry-shot-chart.pdf", width=6.5, height=5)
ggplot(data = shots_data[shots_data$name == "Stephen Curry",]) +
annotation_custom(court_image, -250, 250, -50, 420) +
geom_point(aes(x = x, y = y, color = shot_made_flag)) +
ylim(-50, 420) +
ggtitle('Shot Chart: Stephen Curry (2016 season)') +
theme_minimal()
dev.off()
pdf(file = "../images/kevin-durant-shot-chart.pdf", width=6.5, height=5)
ggplot(data = shots_data[shots_data$name == "Kevin Durant",]) +
annotation_custom(court_image, -250, 250, -50, 420) +
geom_point(aes(x = x, y = y, color = shot_made_flag)) +
ylim(-50, 420) +
ggtitle('Shot Chart: Kevin Durant (2016 season)') +
theme_minimal()
dev.off()
pdf(file = "../images/andre-iguodala-shot-chart.pdf", width=6.5, height=5)
ggplot(data = shots_data[shots_data$name == "Andre Iguodala",]) +
annotation_custom(court_image, -250, 250, -50, 420) +
geom_point(aes(x = x, y = y, color = shot_made_flag)) +
ylim(-50, 420) +
ggtitle('Shot Chart: Andre Iguodala (2016 season)') +
theme_minimal()
dev.off()
pdf(file = "../images/gsw-shot-charts.pdf", width=8, height=7)
ggplot(data = shots_data) +
annotation_custom(court_image, -250, 250, -50, 420) +
geom_point(aes(x = x, y = y, color = shot_made_flag)) +
ylim(-50, 420) +
ggtitle('Shot Charts: GSW (2016 season)') +
facet_wrap(~ name) +
theme_minimal()
dev.off()
jpeg(file = "../images/gsw-shot-charts.pdf", width=800, height=700)
ggplot(data = shots_data) +
annotation_custom(court_image, -250, 250, -50, 420) +
geom_point(aes(x = x, y = y, color = shot_made_flag)) +
ylim(-50, 420) +
ggtitle('Shot Charts: GSW (2016 season)') +
facet_wrap(~ name) +
theme_minimal()
dev.off()
jpeg(file = "../images/gsw-shot-charts.jpg", width=800, height=700)
ggplot(data = shots_data) +
annotation_custom(court_image, -250, 250, -50, 420) +
geom_point(aes(x = x, y = y, color = shot_made_flag)) +
ylim(-50, 420) +
ggtitle('Shot Charts: GSW (2016 season)') +
facet_wrap(~ name) +
theme_minimal()
dev.off()
print.data.frame(two_pt_percentage)
two_pt_percentage
print(kable(two_pt_percentage))
knitr::kable(two_pt_percentage)
knitr::kable(two_pt_percentage, three_pt_percentage)
knitr::kable(list(two_pt_percentage, three_pt_percentage))
knitr::kable(two_pt_percentage, three_pt_percentage), format="latex", booktabs = TRUE)
knitr::kable(two_pt_percentage, format="latex", booktabs = TRUE)
t1 <- knitr::kable(two_pt_percentage, format="latex", booktabs = TRUE)
t2 <- knitr::kable(three_pt_percentage, format="latex", booktabs = TRUE)
cat(c("\\begin{table}[!htb]
\\begin{minipage}{.5\\linewidth}
\\caption{}
\\centering",
t1,
"\\end{minipage}%
\\begin{minipage}{.5\\linewidth}
\\centering
\\caption{}",
t2,
"\\end{minipage}
\\end{table}"
))
knitr::kable(three_pt_percentage)
##### Two-Point Shooting Statistics
```{r comment='', echo = FALSS}
# Setting `results = 'asis'` allows for using Latex within the code chunk
cat('\\begin{center}')
# `{c c}` Creates a two column table
# Use `{c | c}` if you'd like a line between the tables
cat('\\begin{tabular}{ c c }')
print(knitr::kable(two_pt_percentage, format = 'latex'))
# Separate the two columns with an `&`
cat('&')
print(knitr::kable(three_pt_percentage, format = 'latex'))
cat('\\end{tabular}')
cat('\\end{center}')
cat('\\begin{center}')
cat('\\begin{tabular}{ c c }')
print(knitr::kable(two_pt_percentage, format = 'latex'))
cat('&')
print(knitr::kable(three_pt_percentage, format = 'latex'))
cat('\\end{tabular}')
cat('\\end{center}')
knitr::kable_styling(two_pt_percentage, bootstrap_options = "striped", full_width = F, position = "float_right")
kable_styling(two_pt_percentage, bootstrap_options = "striped", full_width = F, position = "float_right")
library(kableExtra)
library(knitr)
library(kableExtra)
```{r comment='', echo = FALSE}
knitr::kable(three_pt_percentage)]
t1 = knitr::kable(two_pt_percentage)
t2 = knitr::kable(three_pt_percentage)
cat(c('<table><tr valign="top"><td>', t1, '</td><td>', t2, '</td><tr></table>'),
sep = '')
##### Two-Point Shooting Statistics
```{r results='asis', echo = FALSE}
cat(c('<table><tr valign="top"><td>', knitr::kable(two_pt_percentage), '</td><td>', t2, '</td><tr></table>'),
sep = '')
grid.arrange(tableGrob(two_pt_percentage), tableGrob(three_pt_percentage), ncol = 2)
library(grid)
grid.arrange(tableGrob(two_pt_percentage), tableGrob(three_pt_percentage), ncol = 2)
library(gridExtra)
library(dplyr)
library(ggplot2)
shots_data <- read.csv("../data/shots-data.csv", stringsAsFactors = FALSE)
shots_data$one <- 1
two_pt_percentage <- summarise(group_by(shots_data[shots_data$shot_type == "2PT Field Goal", ], name), total = sum(one), made = sum(shot_made_flag == "shot_yes"))
two_pt_percentage$perc_made = two_pt_percentage$made / two_pt_percentage$total
two_pt_percentage <- arrange(two_pt_percentage, desc(perc_made))
colnames(two_pt_percentage) <- c("Name", "Total Shots Attemopted", "Shots Made")
three_pt_percentage <- summarise(group_by(shots_data[shots_data$shot_type == "3PT Field Goal", ], name), total = sum(one), made = sum(shot_made_flag == "shot_yes"))
three_pt_percentage$perc_made = three_pt_percentage$made / three_pt_percentage$total
three_pt_percentage <- arrange(three_pt_percentage, desc(perc_made))
total_pt_percentage <- summarise(group_by(shots_data, name), total = sum(one), made = sum(shot_made_flag == "shot_yes"))
total_pt_percentage$perc_made = total_pt_percentage$made / total_pt_percentage$total
total_pt_percentage <- arrange(total_pt_percentage, desc(perc_made))
library(dpylr)
library(dplyr)
setwd("~/Dropbox/School/STAT133/hw-stat133/workout1/report")
