#' 5       4     0.15625    0.96875
#' 6       5     0.03125    1.00000
#'
#' plot(dis2)
#' Returns a plot of the cumulative probability versus number of successess
bin_cumulative <- function(trials, prob) {
distribution <- bin_distribution(trials, prob)
probabilities <- distribution[[1]]$probability
cumulatives <- c()
sum <- 0
for (i in 1:length(probabilities)) {
sum <- sum + probabilities[i]
cumulatives <- c(cumulatives, sum)
}
distribution[[1]]$cumulative <- cumulatives
class(distribution) <- c("bincum",
"data.frame")
distribution
}
bin_cumulative(trials = 5, prob = 0.5)
#      success probability cumulative
#' 1       0     0.03125    0.03125
#' 2       1     0.15625    0.18750
#' 3       2     0.31250    0.50000
#' 4       3     0.31250    0.81250
#' 5       4     0.15625    0.96875
#' 6       5     0.03125    1.00000
#'
#' plot(dis2)
#' Returns a plot of the cumulative probability versus number of successess
bin_cumulative <- function(trials, prob) {
distribution <- bin_distribution(trials, prob)
probabilities <- distribution[[1]]$probability
cumulatives <- c()
sum <- 0
for (i in 1:length(probabilities)) {
sum <- sum + probabilities[i]
cumulatives <- c(cumulatives, sum)
}
distribution[[1]]$cumulative <- cumulatives
class(distribution) <- "bincum"
distribution
}
#' @export
plot.bincum <- function(distribution) {
plot(x = distribution[[1]]$success, y = distribution[[1]]$cumulative, xlab = "successes", ylab = "probability")
lines(x = distribution[[1]]$success, y = distribution[[1]]$cumulative)
}
#' 1 0 0.03125
#' 2 1 0.15625
#' 3 2 0.31250
#' 4 3 0.31250
#' 5 4 0.15625
#' 6 5 0.03125
#'
#' plot(x)
#' Returns a barplot of the distribution
#'
bin_distribution <- function(trials, prob) {
probabilities <- c()
for (i in 0:trials) {
probabilities <- c(probabilities, bin_probability(i, trials, prob))
}
object <- data.frame(success = 0:trials, probability = probabilities)
class(object) <- "bindis"
object
}
#' @export
plot.bindis <- function(distribution) {
barplot(distribution[[1]]$prob, names.arg = distribution[[1]]$success,  xlab = "successes", ylab = "probability")
}
#      success probability cumulative
#' 1       0     0.03125    0.03125
#' 2       1     0.15625    0.18750
#' 3       2     0.31250    0.50000
#' 4       3     0.31250    0.81250
#' 5       4     0.15625    0.96875
#' 6       5     0.03125    1.00000
#'
#' plot(dis2)
#' Returns a plot of the cumulative probability versus number of successess
bin_cumulative <- function(trials, prob) {
distribution <- bin_distribution(trials, prob)
probabilities <- distribution[[1]]$probability
cumulatives <- c()
sum <- 0
for (i in 1:length(probabilities)) {
sum <- sum + probabilities[i]
cumulatives <- c(cumulatives, sum)
}
distribution[[1]]$cumulative <- cumulatives
class(distribution) <- "bincum"
distribution
}
#' @export
plot.bincum <- function(distribution) {
plot(x = distribution[[1]]$success, y = distribution[[1]]$cumulative, xlab = "successes", ylab = "probability")
lines(x = distribution[[1]]$success, y = distribution[[1]]$cumulative)
}
bin_cumulative(trials = 5, prob = 0.5)
#' 1 0 0.03125
#' 2 1 0.15625
#' 3 2 0.31250
#' 4 3 0.31250
#' 5 4 0.15625
#' 6 5 0.03125
#'
#' plot(x)
#' Returns a barplot of the distribution
#'
bin_distribution <- function(trials, prob) {
probabilities <- c()
for (i in 0:trials) {
probabilities <- c(probabilities, bin_probability(i, trials, prob))
}
object <- data.frame(success = 0:trials, probability = probabilities)
class(object) <- "bindis"
object
}
#' @export
plot.bindis <- function(distribution) {
barplot(distribution$prob, names.arg = distribution$success,  xlab = "successes", ylab = "probability")
}
#      success probability cumulative
#' 1       0     0.03125    0.03125
#' 2       1     0.15625    0.18750
#' 3       2     0.31250    0.50000
#' 4       3     0.31250    0.81250
#' 5       4     0.15625    0.96875
#' 6       5     0.03125    1.00000
#'
#' plot(dis2)
#' Returns a plot of the cumulative probability versus number of successess
bin_cumulative <- function(trials, prob) {
distribution <- bin_distribution(trials, prob)
probabilities <- distribution[[1]]$probability
cumulatives <- c()
sum <- 0
for (i in 1:length(probabilities)) {
sum <- sum + probabilities[i]
cumulatives <- c(cumulatives, sum)
}
distribution[[1]]$cumulative <- cumulatives
class(distribution) <- "bincum"
distribution
}
bin_cumulative(trials = 5, prob = 0.5)
source('~/Dropbox/School/STAT133/binomial/R/bin_distribution.R', echo=TRUE)
distribution <- bin_distribution(trials, prob)
#      success probability cumulative
#' 1       0     0.03125    0.03125
#' 2       1     0.15625    0.18750
#' 3       2     0.31250    0.50000
#' 4       3     0.31250    0.81250
#' 5       4     0.15625    0.96875
#' 6       5     0.03125    1.00000
#'
#' plot(dis2)
#' Returns a plot of the cumulative probability versus number of successess
bin_cumulative <- function(trials, prob) {
distribution <- bin_distribution(trials, prob)
probabilities <- distribution[[1]]$probability
cumulatives <- c()
sum <- 0
for (i in 1:length(probabilities)) {
sum <- sum + probabilities[i]
cumulatives <- c(cumulatives, sum)
}
distribution[[1]]$cumulative <- cumulatives
class(distribution) <- "bincum"
distribution
}
bin_cumulative(trials = 5, prob = 0.5)
#' @export
plot.bincum <- function(distribution) {
plot(x = distribution[[1]]$success, y = distribution[[1]]$cumulative, xlab = "successes", ylab = "probability")
lines(x = distribution[[1]]$success, y = distribution[[1]]$cumulative)
}
dis2 <- bin_cumulative(trials = 5, prob = 0.5)
plot(dis2)
install.packages('testthat')
library(testthat)
library(binomial)
test_that("testing checker function with valid arguments") {
expect_true(check_prob(0.5))
expect_true(check_prob(0))
expect_true(check_prob(1))
expect_true(check_trials(0))
expect_true(check_trials(1))
expect_true(check_success(2, 5))
expect_true(check_success(1:4, 5))
}
source('~/.active-rstudio-document', echo=TRUE)
testthat
testthat::test_check("binomial")
library(binomial)
testthat:test_check("binomial")
library(testthat)
testthat:test_check("binomial")
source('~/.active-rstudio-document', echo=TRUE)
test_that("testing check_trials", {
expect_true(check_trials(0))
expect_true(check_trials(1))
expect_error(check_trials(-1))
})
check_prob(-1)
# Private function that returns true if p is a valid probability (0 <= p <= 1)
check_prob <- function(p) {
if (p < 0 || p > 1) {
stop("Probability must be between 0 and 1")
} else {
return(TRUE)
}
}
source('~/Dropbox/School/STAT133/binomial/R/utils.R', echo=TRUE)
check_prob(-1)
source('~/.active-rstudio-document', echo=TRUE)
# Checks that success is a valid success vector for a given number of trials
check_success <- function(success, trials) {
for (i in 1:length(success)) {
if (success[i] < 0) {
stop("Invalid success value")
}
}
if (length(success) > trials || success > trials) {
stop("success larger than number of trials")
}
return(TRUE)
}
source('~/.active-rstudio-document', echo=TRUE)
test_that("testing check_success", {
expect_true(check_success(2, 5))
expect_true(check_success(1:4, 5))
expect_error(check_success(6, 5))
expect_error(check_success(2:7, 5))
})
s
setwd("~/Dropbox/School/STAT133/binomial")
devtools::use_testthat()
library(devtools)
install.packages('devtools')
devtools::use_testthat()
usethis::use_testthat()
use_test()
length(check_prob(0.5)) == 1
source('~/Dropbox/School/STAT133/binomial/tests/testthat/test-summary-measures.R', echo=TRUE)
devtools::build()
aux_skewness(10, 0.3)
aux_skewness(25, 0.4)
aux_skewness(50, 0.1)
aux_skewness(50, 0.1)
round()
round(aux_skewness(10, 0.3), 5)
expect_equal(round(aux_skewness(10, 0.3), 5), 0.2760262)
expect_equal(round(aux_skewness(10, 0.3), 5), 0.27602)
round(aux_skewness(10, 0.3), 5)
expect_equal(round(aux_skewness(10, 0.3), 5), 0.27603)
round(aux_skewness(25, 0.4), 5)
round(aux_skewness(50, 0.1), 5)
aux_kurtosis(10, 0.3)
expect_equal(aux_kurtosis(10, 0.3), -0.1238095)
expect_equal(round(aux_kurtosis(10, 0.3), 5), -0.12380)
round(aux_kurtosis(10, 0.3), 5)
round(aux_kurtosis(20, 0.4), 5)
expect_equal(round(aux_kurtosis(20, 0.4), 5), -0.09167)
round(aux_kurtosis(50, 0.2), 5)
bin_choose(5, 1:5)
expect_equal(bin_choose(5, 1:5), c(5, 10, 10,  5,  1))
expectequal(bin_choose(5, 1:5), c(5, 10, 10,  5,  1))
library(testthat)
expect_equal(bin_choose(5, 1:5), c(5, 10, 10,  5,  1))
expect_equal(bin_choose(5,2), 10)
expect_error(bin_choose(5,6))
expect_equal(bin_choose(10,10), 1)
expect_equal(bin_choose(10,10), 2)
expect_equal(bin_choose(10,2), 2)
expect_equal(bin_choose(10,2), 45)
expect_equal(bin_probability(success = 2, trials = 5, prob = 0.5), 0.3125)
expect_equal(bin_probability(success = 0:2, trials = 5, prob = 0.5), c(0.03125, 0.15625, 0.31250))
expect_error(bin_distribution(50, 0.2))
test_that("testing bin distribution", {
expect_error(bin_distribution(50, 0.2))
})bin_distribution(50, 0.2)
bin_distribution(50, 0.2)
bin_distribution(50, 0.2)[[1]]$probability[3]
bin_distribution(827, 0.72)[[1]]$probability[72]
bin_distribution(827, 0.2)[[1]]$probability[72]
bin_distribution(72, 0.2)[[1]]$probability[72]
bin_distribution(72, 0.)[[1]]$probability[3]
bin_distribution(72, 0.4)[[1]]$probability[3]
expect_equal(bin_distribution(72, 0.74)[[1]]$probability[3], 1.20856e-13)
bin_distribution(72, 0.74)[[1]]$probability[62]
expect_equal(bin_distribution(72, 0.74)[[1]]$probability[62], 0.01169977)
bin_distribution(152, 0.4)[[1]]$probability[100]
expect_s3_class(bin_distribution(50, 0.2))
expect_s3_class("bindis", bin_distribution(50, 0.2))
expect_s3_class(bin_distribution(50, 0.2), "bindis")
expect_s3_class(bin_distribution(50, 0.2), "data.frame")
x <- bin_distribution(trials = 5, prob = 0.5)
class(x)
class(object) <- c("bindis", data.frame)
#' 1 0 0.03125
#' 2 1 0.15625
#' 3 2 0.31250
#' 4 3 0.31250
#' 5 4 0.15625
#' 6 5 0.03125
#'
#' plot(x)
#' Returns a barplot of the distribution
#'
bin_distribution <- function(trials, prob) {
probabilities <- c()
for (i in 0:trials) {
probabilities <- c(probabilities, bin_probability(i, trials, prob))
}
object <- list(data.frame(success = 0:trials, probability = probabilities))
class(object) <- c("bindis", data.frame)
object
}
x <- bin_distribution(trials = 5, prob = 0.5)
class(object) <- c("bindis", "data.frame")
#' 1 0 0.03125
#' 2 1 0.15625
#' 3 2 0.31250
#' 4 3 0.31250
#' 5 4 0.15625
#' 6 5 0.03125
#'
#' plot(x)
#' Returns a barplot of the distribution
#'
bin_distribution <- function(trials, prob) {
probabilities <- c()
for (i in 0:trials) {
probabilities <- c(probabilities, bin_probability(i, trials, prob))
}
object <- list(data.frame(success = 0:trials, probability = probabilities))
class(object) <- c("bindis", "data.frame")
object
}
x <- bin_distribution(trials = 5, prob = 0.5)
class(x)
plot(x)
x
#' 1 0 0.03125
#' 2 1 0.15625
#' 3 2 0.31250
#' 4 3 0.31250
#' 5 4 0.15625
#' 6 5 0.03125
#'
#' plot(x)
#' Returns a barplot of the distribution
#'
bin_distribution <- function(trials, prob) {
probabilities <- c()
for (i in 0:trials) {
probabilities <- c(probabilities, bin_probability(i, trials, prob))
}
object <- list(data = data.frame(success = 0:trials, probability = probabilities))
class(object) <- c("bindis", "data.frame")
object
}
x <- bin_distribution(trials = 5, prob = 0.5)
x
class(object) <- c("data.frame", "bindis")
#' 1 0 0.03125
#' 2 1 0.15625
#' 3 2 0.31250
#' 4 3 0.31250
#' 5 4 0.15625
#' 6 5 0.03125
#'
#' plot(x)
#' Returns a barplot of the distribution
#'
bin_distribution <- function(trials, prob) {
probabilities <- c()
for (i in 0:trials) {
probabilities <- c(probabilities, bin_probability(i, trials, prob))
}
object <- list(data = data.frame(success = 0:trials, probability = probabilities))
class(object) <- c("data.frame", "bindis")
object
}
x <- bin_distribution(trials = 5, prob = 0.5)
x
class(x)
n
#' 1 0 0.03125
#' 2 1 0.15625
#' 3 2 0.31250
#' 4 3 0.31250
#' 5 4 0.15625
#' 6 5 0.03125
#'
#' plot(x)
#' Returns a barplot of the distribution
#'
bin_distribution <- function(trials, prob) {
probabilities <- c()
for (i in 0:trials) {
probabilities <- c(probabilities, bin_probability(i, trials, prob))
}
object <- data.frame(success = 0:trials, probability = probabilities)
class(object) <- c("bindis", "data.frame")
object
}
x <- bin_distribution(trials = 5, prob = 0.5)
x
class(x)
plot(x)
#' @export
plot.bindis <- function(distribution) {
barplot(distribution$prob, names.arg = distribution$success,  xlab = "successes", ylab = "probability")
}
x <- bin_distribution(trials = 5, prob = 0.5)
plot(x)
#' 1 0 0.03125
#' 2 1 0.15625
#' 3 2 0.31250
#' 4 3 0.31250
#' 5 4 0.15625
#' 6 5 0.03125
#'
#' plot(x)
#' Returns a barplot of the distribution
#'
bin_distribution <- function(trials, prob) {
probabilities <- c()
for (i in 0:trials) {
probabilities <- c(probabilities, bin_probability(i, trials, prob))
}
object <- data.frame(success = 0:trials, probability = probabilities)
class(object) <- c("bindis", "data.frame")
object
}
x <- bin_distribution(trials = 5, prob = 0.5)
plot(x)
x
#      success probability cumulative
#' 1       0     0.03125    0.03125
#' 2       1     0.15625    0.18750
#' 3       2     0.31250    0.50000
#' 4       3     0.31250    0.81250
#' 5       4     0.15625    0.96875
#' 6       5     0.03125    1.00000
#'
#' plot(dis2)
#' Returns a plot of the cumulative probability versus number of successess
bin_cumulative <- function(trials, prob) {
distribution <- bin_distribution(trials, prob)
probabilities <- distribution$probability
cumulatives <- c()
sum <- 0
for (i in 1:length(probabilities)) {
sum <- sum + probabilities[i]
cumulatives <- c(cumulatives, sum)
}
distribution$cumulative <- cumulatives
class(distribution) <- c("bincum", "data.frame")
distribution
}
#' @export
plot.bincum <- function(distribution) {
plot(x = distribution$success, y = distribution$cumulative, xlab = "successes", ylab = "probability")
lines(x = distribution$success, y = distribution$cumulative)
}
dis2 <- bin_cumulative(trials = 5, prob = 0.5)
dis2
plot(dis2)
class(dis2)
expect_equals(bin_cumulative(trials = 5, prob = 0.5)$cumulative[2], 0.18750)
expect_equal(bin_cumulative(trials = 5, prob = 0.5)$cumulative[2], 0.18750)
expect_equal(bin_cumulative(trials = 10, prob = 0.2)$cumulative[4], 0.18750)
expect_s3_class(bin_distribution(50, 0.2), "data.frame")
bin_cumulative(trials = 10, prob = 0.2)$cumulative[4]
expect_equivalent(bin_cumulative(trials = 10, prob = 0.2)$cumulative[4], 0.8791261)
expect_equivalent(bin_cumulative(trials = 10, prob = 0.2)$cumulative[4], 0.8791261 + 1.84e-08)
devtools::document()
devtools::test()
devtools::build()
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::use_vignette("my-vignette")
#' 1 0 0.03125
#' 2 1 0.15625
#' 3 2 0.31250
#' 4 3 0.31250
#' 5 4 0.15625
#' 6 5 0.03125
#'
#' plot(x)
#' Returns a barplot of the distribution
#'
bin_distribution <- function(trials, prob) {
probabilities <- c()
for (i in 0:trials) {
probabilities <- c(probabilities, bin_probability(i, trials, prob))
}
object <- data.frame(success = 0:trials, probability = probabilities)
class(object) <- c("bindis", "data.frame")
object
}
devtools::load_all()
expect_s3_class(bin_distribution(50, 0.2), "data.frame")
library(binomial)
type(dis)
class(dis)
dis <- bin_distribution(5, 0.3)
class(dis)
